from bke import MLAgent, is_winner, opponent, load, validate, RandomAgent, plot_validation

from bke import MLAgent, is_winner, opponent, train, save, train_and_plot, start
import random

 
class MyAgent(MLAgent):
    def evaluate(self, board):
        if is_winner(board, self.symbol):
            reward = 1
        elif is_winner(board, opponent[self.symbol]):
            reward = -1
        else:
            reward = 0
        return reward
    
random.seed(1)
   
#alpha is voor de leerfactor, epsilon voor verkenningsfactor
my_agent = MyAgent(alpha=0.2, epsilon=0.8)
random_agent = RandomAgent()

train_and_plot(
    agent=my_agent,
    validation_agent=random_agent,
    iterations=50,
    trainings=100,
    validations=100)

train(my_agent, 3000)

save(my_agent, 'MyAgent_3000')
my_agent = load('MyAgent_3000')
my_agent.learning = False
